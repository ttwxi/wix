6a 
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int main() {
    int fd1 = 0, fd2 = 8;
    char buf[50];
    if ((fd1 = open("test.txt", O_RDWR, 0)) < 0) printf("file open error");

    dup2(fd1, fd2);
    printf("%d %d \n", fd1, fd2);
    read(fd1, buf, 10);
    lseek(fd2, 0L, SEEK_END);
    write(fd2, buf, 10);
    printf("%s\n", buf);
    return 0;
} 
cc 6a.c
./a.out


6b


#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    int fd;
    char buf[256];
    struct flock fv;

    if (argc < 2) {
        printf("Usage %s <filename>\n", argv[0]);
        exit(0);
    }

    if ((fd = open(argv[1], O_RDWR)) == -1) {
        perror("open");
        exit(1);
    }

    fv.l_type = F_WRLCK;
    fv.l_whence = SEEK_END;
    fv.l_start = -100;
    fv.l_len = 100;

    printf("press enter to set lock\n");
    getchar();

    printf("locked\n");

    if (lseek(fd, -50, SEEK_END) == -1) {
        perror("lseek");
        close(fd);
        exit(1);
    }

    ssize_t n = read(fd, buf, 100);
    if (n == -1) {
        perror("read");
        close(fd);
        exit(1);
    }
    buf[n] = '\0';

    printf("data from file:\n%s\n", buf);

    printf("press enter to unlock\n");
    getchar();

    fv.l_type = F_UNLCK;
    fv.l_whence = SEEK_SET;
    fv.l_start = 0;
    fv.l_len = 0;

    if (fcntl(fd, F_SETLK, &fv) == -1) {
        perror("fcntl - unlock");
        close(fd);
        exit(1);
    }

    printf("unlocked\n");
    close(fd);
    return 0;
} 
cc 6b.c
./a.out test.txt

8a
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdlib.h>

int main(int argc, char * argv[]) {
    int i;
    struct stat buf;
    char *ptr;
    for (i = 1; i < argc; i++) {
        printf("%s: ",argv[i]);
        if (lstat(argv[i], &buf) < 0) {
            printf("lstat error\n");
            continue;
        }
        if (S_ISREG(buf.st_mode)) ptr = "regular";
        else if (S_ISDIR(buf.st_mode)) ptr = "directory";
        else if (S_ISCHR(buf.st_mode)) ptr = "character block";
        else if (S_ISSOCK(buf.st_mode)) ptr = "socket file";
        else if (S_ISFIFO(buf.st_mode)) ptr = "FIFO";
        else if (S_ISBLK(buf.st_mode)) ptr = "block special";
        else if (S_ISLNK(buf.st_mode)) ptr = "symbolic link";
        else ptr = "**unknown mode**";
        printf("%s\n", ptr);
    }
    return 0;


cc8a.c
/a.out test.txt myfiofo aahaj
}





8b

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>

int main() {
    pid_t pid;
    int status;
    pid_t p_pid = getpid();
    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {
        pid_t c_pid = getpid();
        printf("Child process (PID: %d) executing...\n", c_pid);
        execl("./p1", "p1", "example.txt", (char *)NULL);
        perror("execl");
        exit(1);
    } else {
        printf("Parent process (PID: %d) executing...\n", p_pid);
        waitpid(pid, &status, 0);
        printf("Parent process: Child process (PID: %d) has exited.\n",pid);
    }
    return 0;
}



p1.c


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file>\n", argv[0]);
        exit(1);
    }
    char *filename = argv[1];
    if (access(filename, F_OK) == 0) printf("File %s exists and can be accessed.\n", filename);
    else printf("File %s does not exist or cannot be accessed.\n", filename);
    return 0;
}


cc p1.c -o p1
then cc ./a.



9a

#include <fcntl.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>

int main() {
    struct stat statbuf;

    if (stat("foo", &statbuf) < 0) printf("stat error on foo\n");

    if (chmod("foo", (statbuf.st_mode & ~S_IXGRP) | S_IXOTH) < 0) printf("chmod error on foo\n");

    if (chmod("bar", S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH) < 0) printf("chmod error for bar\n");

    return 0;
}



9a-umask

#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>

#define RWRWRW (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH)

int main() {
    umask(0);
    if (creat("foo", RWRWRW) < 0) {
        printf("creat error for foo");
    }
    umask(S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);

    if (creat("bar", RWRWRW) < 0) {
        printf("creat error for bar");
    }
    return 0;
}

cc 9aumask -o umask
./umask
ls -l
same for 9a


9b

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    char buf[20];
    int fd = open("seeking", O_RDWR);
    int a = lseek(fd, 0, SEEK_END);
    fd = open("seeking", O_RDWR);
    int fd1 = open("seeking", O_RDWR); 
    printf("first 20 characters:\n");
    read(fd, buf, 20);
    write(1, buf, 20);
    printf("\nSeek to 10th byte and display 20 characters from there:\n");
    lseek(fd1, 10, SEEK_SET);
    read(fd1, buf, 20);
    write(1, buf, 20);
    printf("\nSeek 10 bytes ahead from the current file offset and display 20 characters:\n");
    lseek(fd1, 20, SEEK_SET);
    read(fd1, buf, 20);
    write(1, buf, 20);
    printf("\nFile Size: %d\n", a);
    return 0;
}
cc ./aiut





11a

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>

int main() {
    int fd1 = open("dup.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    int fd2 = dup(fd1);
    printf("dup(): Original fd: %d, New fd: %d\n", fd1, fd2);
    write(fd1, "Line from fd1\n", 14);
    write(fd2, "Line from fd2\n", 14);
    close(fd1);
    close(fd2);

    int fd3 = open("dup2.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    int fd4 = 5;
    dup2(fd3, fd4);
    printf("dup2(): Original fd: %d, Specified fd: %d\n", fd3, fd4);
    write(fd3, "Line from fd3\n", 14);
    write(fd4, "Line from fd4\n", 14);
    close(fd3);
    close(fd4);
    return 0;
}


cc and /a.out



11b


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: %s num1 num2\n", argv[0]);
        exit(0);
    }
    pid_t pid = fork();
    if (pid < 0) {
        perror("fork failed");
        exit(0);
    } else if (pid == 0) {
        execl("./p23", "p23", argv[1], argv[2], (char *)NULL);
        perror("execl failed");
        exit(1);
    } else {
        int status;
        waitpid(pid, &status, 0);
        if (WIFEXITED(status)) printf("Child exited with status %d\n", WEXITSTATUS(status));
        else printf("Child terminated abnormally\n");
        return 0;
    }
}


p23


#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    int num = atoi(argv[1]);
    int num2 = atoi(argv[2]);
    printf("Sum = %d\n", num + num2);
    return 0;
} 
ccp23. -o p23
cc 11b.c
./a.out 4 5








1a


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main(int argc, char *argv[]) {
    int src, dest, n;
    char buf;
    int filesize;
    int i;

    if (argc != 2) {
        fprintf(stderr, "usage %s <src>", argv[0]);
        exit(-1);
    }

    if ((src = open(argv[1], O_RDONLY)) < 0) {
        fprintf(stderr, "can't open source\n");
        exit(-1);
    }

    filesize = lseek(src, (off_t)0, SEEK_END);
    printf("Source file size is %d\n", filesize);

    printf("Reversal contents of the file:");
    for (i = filesize-1; i>=0;i--) {
        lseek(src, (off_t)i, SEEK_SET);
        if ((n = read(src, &buf, 1)) != 1) {
            fprintf(stderr, "can't read 1 byte");
            exit(-1);
        }

        if ((n = write(1, &buf, 1)) != 1) {
            fprintf(stderr, "can't write 1 byte");
            exit(-1);
        }
    }
    write(STDOUT_FILENO, "\nDONE\n", 5);
    close(src);
    close(dest);
    return 0;
}

.a/out t1.txt




1b



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

int main() {
    int fd;
    pid_t pid;
    fd = open("test.txt", O_CREAT | O_RDWR | O_TRUNC, 0644);
    if (fd < 0) {
        perror("file open failed");
        exit(1);
    }

    write(fd, "InitialContent\n", 15);

    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        printf("Child Process: Writing to file...\n");
        write(fd, "ChildWriting\n", 13);

        off_t offset = lseek(fd, 0, SEEK_CUR);
        printf("Child Process: File offset after write: %ld\n", offset);
    } else {
        wait(NULL);
        printf("Parent Process: Writing to file...\n");
        write(fd, "ParentWriting\n", 14);

        off_t offset = lseek(fd, 0, SEEK_CUR);
        printf("Parent Process: File offset after write: %ld\n", offset);
    }

    close(fd);
    return 0;
}




3a


#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <dirent.h>
#include <string.h>

int main() {
    DIR *dp;
    struct dirent *dir;
    int fd, n;

    dp = opendir(".");
    if (dp) {
        while ((dir = readdir(dp)) != NULL) {
            if (!strcmp(dir->d_name, ".") || !strcmp(dir->d_name, "..")) continue;
            fd = open(dir->d_name, O_RDWR);
            if (fd == -1) continue;

            n = lseek(fd, 0, SEEK_END);
            close(fd);

            if (n == 0) {
                unlink(dir->d_name);
            }
        }
        closedir(dp);
    }
    return 0;
}




3b



#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>
#include <time.h>

int main(int argc, char *argv[]) {
    struct dirent *dir;
    struct stat mystat;
    DIR *dp;

    dp = opendir(".");
    if (dp) {
        while ((dir = readdir(dp)) != NULL) {
            stat(dir->d_name, &mystat);
            printf("%6ld %6o %d %d %s %s\n",
                mystat.st_ino,
                mystat.st_mode,
                mystat.st_uid,
                mystat.st_gid,
                ctime(&mystat.st_atime),
                dir->d_name
            );
        }
        closedir(dp);
    } else {
        perror("Error opening directory");
        return 1;
    }
    return 0;
}


4a


#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <errno.h>

int main(int argc, char * argv[]) {
    if (strcmp(argv[1], "-h") == 0) {
        printf("Creating hard link between %s and %s\n", argv[2], argv[3]);

        if (link(argv[2], argv[3]) == 0) printf("Hard link created successfully");
        else {
            perror("Error creating hard link");
            return 1;
        }
    } else if (strcmp(argv[1], "-s") == 0) {
        printf("Creating soft link between %s and %s\n", argv[2], argv[3]);

        if (symlink(argv[2], argv[3]) == 0) printf("Soft link created successfully");
        else {
            perror("Error creating soft link");
            return 1;
        }
    } else {
        printf("Invalid option: %s\n", argv[1]);
    }
    return 0;
}



4b


#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();
    if (pid < 0) {
        perror("fork failed");
    } else if (pid == 0) {
        if (execl("./textinterpreter", "test", "myarg1", "myarg2", "myarg4", (char *)NULL) < 0) perror("execl failed");
    } else{
        if (waitpid(pid, NULL, 0) < 0) perror("waitpid failed");
    }
    return 0;
}

echo all

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char * argv[]) {
    for (int i = 0; i < argc; i++) {
        printf("argv[%d] = %s\n",i,argv[i]);
    }
    return 0;
}

cc echoall -o echoall
realpath echoall paste in interpreter
cc .a,out



5b


#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

void s_h(int sn) {
    printf("\nCaught SIGINT %d\n", sn);

    struct sigaction sa;
    sa.sa_handler = SIG_DFL;
    sa.sa_flags = 0;
    sigemptyset(&sa.sa_mask);

    if (sigaction(SIGINT, &sa, NULL) == -1) {
        perror("sigaction");
        exit(1);
    }
}

int main() {
    struct sigaction sa;
    sa.sa_handler = s_h;
    sa.sa_flags = 0;
    sigemptyset(&sa.sa_mask);

    if (sigaction(SIGINT, &sa, NULL) == -1) {
        perror("sigaction");
        exit(1);
    }
    
    while (1) {
        printf("Press Ctrl + C to trigger signal handler...\n");
        pause();
    } 
    return 0;
}


5a 

#include <stdio.h>
#include <utime.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>

int main(int argc, char * argv[]) {
    int fd;
    struct stat st_1;
    struct stat st_2;
    struct utimbuf times;

    if (stat(argv[1], &st_1) < 0) printf("Error!\n");
    if (stat(argv[2], &st_2) < 0) printf("Error!\n");

    printf("Before copying...\n");
    printf("Access Time %s\nModification Time %s\n",
        ctime(&st_1.st_atime), ctime(&st_1.st_mtime));

    times.modtime = st_2.st_mtime;
    times.actime = st_2.st_atime;

    if (utime(argv[1], &times) < 0) printf("Error copying time\n");
    if (stat(argv[1], &st_1) < 0) printf("error!\n");

    printf("After copying...\n");
    printf("Access Time %s\nModification Time %s\n",
        ctime(&st_1.st_atime), ctime(&st_1.st_mtime));
    return 0;
}

